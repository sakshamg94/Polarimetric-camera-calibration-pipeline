function cameraParams = geometricCalibration(cam , squareSize)
% Auto-generated by cameraCalibrator app on 07-Aug-2020
%-------------------------------------------------------
% squareSize = 1.350000e+01;  % in units of 'millimeters'


% Define images to process
src = 'C:\Users\tracy\Downloads\saksham_polarimetric_cam\';
imageFileNames = ...
    {[src,'cam_', num2str(cam),'\Cam_', num2str(cam),'_Image1.jpg'],...
    [src,'cam_', num2str(cam),'\Cam_', num2str(cam),'_Image2.jpg'],...
    [src,'cam_', num2str(cam),'\Cam_', num2str(cam),'_Image3.jpg'],...
    [src,'cam_', num2str(cam),'\Cam_', num2str(cam),'_Image4.jpg'],...
    [src,'cam_', num2str(cam),'\Cam_', num2str(cam),'_Image5.jpg'],...
    [src,'cam_', num2str(cam),'\Cam_', num2str(cam),'_Image6.jpg'],...
    [src,'cam_', num2str(cam),'\Cam_', num2str(cam),'_Image7.jpg'],...
    [src,'cam_', num2str(cam),'\Cam_', num2str(cam),'_Image8.jpg'],...
    [src,'cam_', num2str(cam),'\Cam_', num2str(cam),'_Image9.jpg'],...
    [src,'cam_', num2str(cam),'\Cam_', num2str(cam),'_Image10.jpg'],...
    [src,'cam_', num2str(cam),'\Cam_', num2str(cam),'_Image11.jpg'],...
    [src,'cam_', num2str(cam),'\Cam_', num2str(cam),'_Image12.jpg'],...
    [src,'cam_', num2str(cam),'\Cam_', num2str(cam),'_Image13.jpg'],...
    [src,'cam_', num2str(cam),'\Cam_', num2str(cam),'_Image14.jpg'],...
    [src,'cam_', num2str(cam),'\Cam_', num2str(cam),'_Image15.jpg'],...
    };
% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates of the corners of the squares
worldPoints = generateCheckerboardPoints(boardSize, squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 3, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);

% View reprojection errors
%     h1=figure; showReprojectionErrors(cameraParams);

% Visualize pattern locations
%     h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
%     displayErrors(estimationErrors, cameraParams);

% For example, you can use the calibration data to remove effects of lens distortion.
%     undistortedImage = undistortImage(originalImage, cameraParams);

% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('MeasuringPlanarObjectsExample')
% showdemo('StructureFromMotionExample')
end